# -*- coding: utf-8 -*-
"""Analysis of Accuracy of Classification Models

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sTf2Z0NI1rfMDLGf9Zr--6ony0YGLtUD
"""

# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report
from imblearn.over_sampling import RandomOverSampler
# Read data from a CSV file in the same directory
file_name = 'diab.csv' # Replace with your actual file name
df = pd.read_csv(file_name)
# Mapping values
yes_no_mapping={'Yes':1, 'No':0}
def replace_yes_no(value):
  return yes_no_mapping.get(value, value)

# Apply the replacement to the entire DataFrame
df['Gender'] = df['Gender'].map({'Male': 1, 'Female': 0})
df = df.applymap(replace_yes_no)

#X = df.iloc[:, :-1].values # Features
X = df.iloc[:, :-1].fillna(method='ffill').values
y = df.iloc[:,-1].values # Labels


# Split the dataset into training and testing sets
X_train_not_resampled, X_test, y_train_not_resampled, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Apply random oversampling to handle imbalanced classes
oversampler = RandomOverSampler(random_state=42)
X_train, y_train = oversampler.fit_resample(X_train_not_resampled, y_train_not_resampled)

# Decision Tree Classifier
def decision_tree_classifier(X_train, y_train, X_test):
  # Create and train the Decision Tree model
  dt_classifier = DecisionTreeClassifier(random_state=42)
  dt_classifier.fit(X_train, y_train)
  # Make predictions on the test set
  dt_predictions = dt_classifier.predict(X_test)
  return dt_classifier, dt_predictions

# Naive Bayes Classifier
def naive_bayes_classifier(X_train, y_train, X_test):
  # Create and train the Naive Bayes model
  nb_classifier = GaussianNB()
  nb_classifier.fit(X_train, y_train)
  # Make predictions on the test set
  nb_predictions = nb_classifier.predict(X_test)
  return nb_classifier, nb_predictions

# Print results
def evaluate(predictions, y_test, algorithm_name):
  accuracy = accuracy_score(y_test, predictions)
  report = classification_report(y_test, predictions)
  print(f"Results for {algorithm_name}:")
  print(f"Accuracy: {accuracy:.2f}")
  print("Classification Report:")
  print(report)
  print("\n")

# Take input from the user for a new instance
def get_user_input():
  user_data = []
  for i in range(X.shape[1]):
    feature_value = float(input(f"Enter value for{df.columns[i]}: "))
    user_data.append(feature_value)
  return np.array([user_data])

# Decision Tree
dt_classifier, dt_predictions = decision_tree_classifier(X_train,y_train, X_test)
evaluate(dt_predictions, y_test, "Decision Tree")

# Naive Bayes
nb_classifier, nb_predictions = naive_bayes_classifier(X_train,y_train, X_test)
evaluate(nb_predictions, y_test, "Naive Bayes")

user_input = get_user_input()
# Predict using Decision Tree
dt_user_prediction = dt_classifier.predict(user_input)
print(f"Prediction using Decision Tree: {'Diabetic' if dt_user_prediction[0] == 1 else 'Not Diabetic'}")

# Predict using Naive Bayes
nb_user_prediction = nb_classifier.predict(user_input)
print(f"Prediction using Naive Bayes: {'Diabetic' if nb_user_prediction[0] == 1 else 'Not Diabetic'}")